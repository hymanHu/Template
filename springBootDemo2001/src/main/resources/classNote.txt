github地址： https://github.com/hymanHu/Template.git
spring
	1、从面到点的方式
		一系列功能的集成者，spring mvc、spring boot、spring cloud、spring security、data access template、unit test……
		ioc：控制反转，谁控制了谁（容器控制了bean的生命周期）？怎么反转的？（从new的方式，到依赖注入）
		aop：业务流，公用的逻辑、抽取行程独立的切面、横切的方式切入到指定位置；
		事务
	2、核心包
		core：
		aop
		data access
		web
		test
MVC
	M（model、数据）、V（view、展示）、C（controller、控制器）
	view --- controller ---- service ---- data access（sql、nosql） ---- service ---- controlle ---- view
Maven
	eclipse配置
	远程jar仓库、本地jar仓库的概念
	如何通过pom，寻找本地jar位置
工具
	浏览器：firefox、chrome
	文本编译器：notepad++
	接口测试工具：postman
	
===========================================================
Spring Boot
	what？整合主流第三方框架，形成的快速开发框架；
	回顾ssm
		web项目 ---- Maven管理（pom） ---- web.xml(上下文、监听器、过滤器、servlet) ---- 各种配置文件（applicationContext.xml、springMvcConfig.xml、springMybatis.xml or springHibernate.xml、springShiro.xml）
		逐一加入配置、启动项目查看是否有错，逐一解决
		配置的坟墓
	核心
		快速搭建项目
		pom管理：starter依赖形式，常用依赖，按组聚集在一起，形成单条依赖，父子继承的方式，解决版本问题
		原则：习惯优于配置，大大缩小了配置，没有web.xml
		bean自动配置，采用注解化
		servlet容器，不需要外部的servlet容器；
		监控
	why？
		配置、编码、部署变得简单
	mvc、boot、cloud
		mvc：web
		boot：垂直应用框架，web组件基于mvc；
		cloud：分布式应用框架，三维立体的运用，多个垂直应用组成，每个微服务都是spring boot
	核心注解
		@SpringBootApplication ---- 启动spring boot工程的注解；
		@Configuration ---- 配置类的注解，相当于<beans></beans>
		@Bean ---- 相当于 <bean></bean>
		@AutoConfigureAfter
		@PropertySource ---- 读取配置文件
		@ConfigurationProperties ---- 设置配置文件属性
		@Value ---- 读取配置文件的值
		@Component ---- 注册为 spring 组件
		@Autowired || @Resource(name="*****")
		@Transactional ---- 事务注解
		@Aspect ---- aop注解
		@Controller | @RestController
			@RequestMapping、@PostMapping
			@ResponseBody
			@PathVariable、@RequestParam、@RequestBody
		@Service
		@Repository
			@Mapper、@Select、@Results、@Many、@ResultMap
		
===========================================================
spring boot 框架搭建
	基于mvc的maven管理的web项目
	eclipse
		new ---- other ----- spring ---- spring start project ---- 输入相应的信息 ---- fix the bug ---- 分包 ---- 书写接口
	
	问题整理
		1、关于eclipse sts插件的问题
			更换网络下载
			更换已经安装好插件的版本，我已将自己使用的eclipse压缩后传到了共享目录
		2、报错：org.apache.maven.archiver.mavenarchiver.getmanifest
			maven配置文件不是最新的，需要升级maven插件
			help ---- Install New Software ---- add（任选一个）
			https://otto.takari.io/content/sites/m2e.extras/m2eclipse-mavenarchiver/0.17.2/N/LATEST
			http://repo1.maven.org/maven2/.m2e/connectors/m2eclipse-mavenarchiver/0.17.2/N/LATEST/
			点击 next 前，将 eclipse Install 窗口右下角的 Contact all update sites during install to find required software 选项；
			安装成功后，重启eclipse 然后再右键项目maven update project；
			-------------------------
			访问国外服务器，也可能存在无法加载的问题，解决思路如第一点
		3、利用sts插件创建spring boot项目时，连接超时的问题
			设置超时时间：window ---- preference ---- spring ---- bean support ---- time out
		4、端口被占用报错：Address used
			cmd ---- 查询占用端口，杀掉对应pid ---- 杀不掉的情况，到系统服务中停掉相应服务 || 修改某些软件对应端口
			netstat -ano | findstr "1434"
			taskkill /f /pid 12700
			
		
===========================================================
spring boot 部署与运行
	main方法运行
	jar、war，java命令的方式运行
	war放到外置servlet容器运行
		spring 内置的tomcat jar与外置的jar冲突？
		无web.xml的问题？
Git
	概念
		远程代码仓库、本地代码仓库
		流程：ide代码变更 ---- 本地代码仓库（commit） ----- 提交到远程代码仓库（push）
		代码分支：开发目的不同，创建版本分支 ---- merge（合并分支代码）
	常见功能
		clone、branch、commit、push、pull、merge、revert
	git vs svn
		git：分布式、分支处理方便快捷、无全局版本号
		svn：集中式、分支遗漏、全局版本号
	下载并安装git、在github上注册账号
	

作业
	1、安装对应的工具
		浏览器：firefox、chrome
		文本编译器：notepad++
		接口测试工具：postman
	2、创建spring boot项目，并且提供一个接口，接口返回string；
	3、安装git客户端、创建github帐号，并将自己创建的项目上传到github
		注解格式：时间 + 作业内容
		例子："2020-04-20，创建springboot项目，提供一个接口。"
		
		
	名字：https://github.com/hymanHu/springBoot2001.git
	
===========================================================
配置文件
	种类：properties文件、yml文件
	全局配置文件
		application.properties
		application.yml
	优先级
		相同位置：properties > yml
		不同位置：
			外置：**.jar相同目录/config > **.jar相同目录
			内置：src\main\resources\config > src\main\resources\
	读取
		@PropertySource ---- 绑定配置文件位置（全局配置文件无需绑定）
		@Value ---- 读取配置文件值
		@ConfigurationProperties ---- 如果指定了前缀，无需@Value
		properties文件命名规则：下划线 或者 .，不要使用驼峰法
log配置
	logback
		1、pom引入jar ---- springboot已经默认添加，无需手动引入
		2、相应配置logback-dev.xml
			设置全局变量
			控制台
			文件
			第三方jar级别
			自己书写代码的级别
		3、全局配置文件指定log配置
多环境配置
	pom：无需外部jar支持
	application.properties
		不同的环境，配置细节不同：log、数据源
		步骤：
			多环境配置文件命名：application-{profile}.properties
			多环境配置文件的引用：spring.profiles.active=live
热部署的配置
	pom ---- 引入jar ---- spring-boot-devtools
	application.properties
		开启restart
		指定restart扫描路径
	应用：修改java代码，应用自动重启
http and https
	http:超文本传输协议，端口默认80，明文传输、安全隐患
	https：安全的超文本传输协议，端口默认443，数据有加密措施
	安全
		数据的安全
		证书的安全
	ssl证书
		购买
		自己生成： keytool -genkey -alias tomcat -keyalg RSA ---- 创建别名为tomcat的一条证书，使用RSA算法
	--------------------------------------------------
	1、pom ----- 无需引入相应的jar
	2、application.properties
	3、书写配置类
		新需求：同时支持http、https
		思路：新增一个连接器，支持http，将连接器加入到tomcat的容器里
代码重构
	重构了控制器：path、restController
webServiceApi
	SOAP：简单对象访问协议，xml，描述交换数据的相关信息，比较庞大，越做越复杂 ---- WSDL，定义了数据交换的信息
	REST：架构风格，专门针对网络应用设计开发
		reatful
			url结尾不包含/
			正斜杠分隔，指使层级关系
			-连接符提高可读性
			不能使用_
			url全小写
		举例 user
			单资源
				/api/user/{userId} ---- get
				/api/user ---- post
				/api/user ---- put
				/api/user/{userId} ---- delete
				/api/user/{userId}/name?name=*** ---- 修改名字
			复数资源
				/api/users ---- get
				/api/users/search?name=*** ---- get
				/api/users ----- post, searchVo
				/api/users/searchByName
			嵌套资源
				/api/teams/{teamId}/member ---- get
				/api/teams/{teamId}/member/{memberId}
				
		
资料共享：https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2Fshare
github：https://github.com/hymanHu/Template.git	
作业
	完成：properties, log, application-{profile}, devtools, http, https
	提交方式：github
	注释上写明日期以及作业内容

==================================================================
知识回顾
	spring介绍
	mvc思想：m（数据）、v（展示）、c（控制）
	maven和eclipse使用
spring boot
	简介：整合主流第三方框架，形成的快速开发框架
	核心内容
		快速搭建项目
		pom管理：starter依赖形式，常用依赖，按组聚集在一起，形成单条依赖，父子继承的方式，解决版本问题
		原则：习惯优于配置，大大缩小了配置，没有web.xml
		bean自动配置，采用注解化
		servlet容器，不需要外部的servlet容器；
		监控
	注解
		@SpringBootApplication ---- 启动spring boot工程的注解；
		@Configuration ---- 配置类的注解，相当于<beans></beans>
		@Bean ---- 相当于 <bean></bean>
		@Component ---- 注册为 spring 组件
		@Autowired || @Resource(name="*****")
		@Controller
			返回modelandview（页面） ---- @Controller
			返回数据 ---- @Controller + @ResponseBody = @RestController
		@Service
		@Repository
		
		我们需要一个对象 ---- 最古老的的new出来 ---- spring框架，不用自己new了，ioc帮我们干这个事情 ---- spring mvc期间，使用配置文件来完成 ---- spring boot期间，使用注解完成
搭建框架
	共享目录提交了我正在使用的eclipse压缩包，已经装好了插件，省去了装插件的麻烦
spring boot 运行
Git
	思想
		远程仓库 ----- 本地仓库
		commit提交到本地仓库
		push将本地仓库提交到远程仓库
	下载客户端 ---- 安装 ---- 配置环境变量（省去这一步，安装中自动完成） ----- 检验 git --version
	github ---- 注册账号 ---- 创建仓库 ---- clone 仓库到本地文件夹
		eclipse删除项目 ----- 将已有的项目移动到本地仓库文件夹下 ---- eclipse导入项目 ----- 选择忽略文件进行忽略（bin、target、mvn） ---- add to index（加入提交序列）---- 添加comments ---- commit and push | commit（项目文件夹cmd ---- git status ---- git push origin master）
		直接创建项目在仓库 ---- 后续步骤一致
		删除仓库项目 ---- 提交
		revert 某次提交 ---- push
配置文件
	种类：properties、yml两种，怎么转换：https://www.toyaml.com/index.html
	优先级：properties > yml，外置大于内置，config下 > 大于config平级 || 测试：整两份配置不同端口，放在不同位置，启动项目，查看项目开启那个配置的端口
	读取：在需要的地方以value对属性的注解：@Value("${http.port}")
log配置
	套路顺序1：pom引入jar ---- 已经完成
	套路顺序2：配置文件做配置、书写配置类
		logback-dev.xml ---- 规则
			控制台输出、文件输出、三方jar的级别、root级别指定
		logging.config=classpath:config/logback-dev.xml ---- 引入规则
	套路顺序3：应用
		private final static Logger LOGGER = LoggerFactory.getLogger(TestController.class);
多环境配置
	场景：开发人员能不能动生产数据库？ ---- 代码一致，但数据库不一致该怎么弄？ ----- 不同的开发环境
	三个环境：application-{profile}.properties
		dev ----- 开发人员玩 ---- application-dev.properties
		Staging ----- 测试人员玩 ---- application-staging.properties
		live环境 ----- 客户玩 ---- application-live.properties
	全局配置文件引入：spring.profiles.active=dev
热部署的配置
	套路顺序1：pom ---- spring-boot-devtools
	套路顺序2：配置
		spring.devtools.restart.enabled=true
		spring.devtools.restart.additional-paths=src/main/java
	套路顺序3：应用 ---- 自动restart，无需手动应用
http（超文本传输协议）、https（安全的超文本传输协议）
	概念：
		数据安全（https）
		ssl证书：keytool -genkey -alias tomcat -keyalg RSA
		证书安全（未经注册的证书是不安全的，浏览器会提示访问网站不安全，接受并继续就好了）
	实现的步骤
		套路顺序1：pom ---- 无需引入
		套路顺序2：配置
			将证书拷贝到项目里
			server.ssl.key-store=classpath:.keystore
			server.ssl.key-store-password=111111
			-----------------------------------------------
			思路：
				实现http、https请求，servlet 容器完成的，----- 增加httpp，是不是应该在容器上下功夫 ----- ServletWebServerFactory（TomcatServletWebServerFactory）
				配置类：WebServerConfig
		套路顺序3：应用
			直接访问https，可用
webServiceApi
	restful：rest api 接口在path命名上的一些规范 ---- 代码的可读性；
		一个程序员，自杀了，领导和同事分析结果是什么呢：
			命名不规范、还没有注解
			换行不规范，瞎换行
			整天使用git push -f
		单资源、复数资源、嵌套资源
==================================================================
mybatis
	介绍：
		源自于ibatis ---- mybatis ---- 半自动
		hibernate（jpa） ---- 全自动 hql
	套路顺序1：pom
		mysql ---- 注意版本
		连接池 ---- hikari ----- 无需引入
		mybatis ----- 引入
		分页 ---- sql分页（不同数据库分页语句不一致） ---- 分页插件 ----- 引入
	套路顺序2：配置
		mysql ---- 注意版本
		hikari
		mybatis ----- 有mapper.xml和无mapper.xml
	套路顺序3：应用
		书写三层：dao、server、controller
		dao
			一对多组合查询
			结果集公用
			分页查询
			insert
	作业：三层练习
		一对多组合查询
		结果集公用
		分页查询
		insert
		
	enum 结果集公用
	结果集公用、enum
	
	enum
		使用常量的形式，好理解
		新需求：比如说显示用户的照片，需要两张图片，一张图片大图片（500*500、BIG_）、一张中间图片（100*100,MIDDLE_）、一张小图片（50*50，SMALL_）、
		处理一些按种类，每个种类有多个属性，类似于常量的数据；
		写法：
			定义属性，定于构造器，实例化不同种类的数据（根据构造器）
	结果集公用
		使用@ResultMap 指向已经定义好的@Results，就能达到公用的目的1
==================================================================
mybatis
	多参数查询、多条件脚本查询、update、delete、事务
	
	作业
		//TODO	
		换行
		
自动生成表
	简介：JPA（hibernate）
	套路顺序1：pom ---- 引入jpa
	套路顺序2：配置 ---- 策略配置update、引擎配置innerdb
	套路顺序3：应用
		实体bean添加相应的注解 ---- 启动程序
		
view
	简介：
		jsp ---- 模板引擎、java
		thymeleaf ---- 模板引擎，基于xml、html5、spring boot推荐使用
	套路顺序1：pom ---- 引入thymeleaf
	套路顺序2：配置 ---- 详见代码
	套路顺序3：应用
		碎片组装思想
			一个页面拆分成如下碎片：头部、左边菜单、底部、展示的中间区域body（真正变化的）
			当我们要跳转并访问某页面时候：那上面的碎片进行组装
		模块化思想
			前端页面分模块、和后端的modules一一对应
			
作业
	1、多参数查询、多条件脚本查询、update、delete、事务
	2、user\role\resource ---- 增删改查接口写出来
	
==================================================================
回顾
	多参数查询
	调试
thymleaf
	创建templates分包，按模块
	创建index.html ---- 拆分index各个功能块
		head
			js、css引用
				回顾jsp
					<script src="http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js"></script>
					<script src="${pageContext.request.contextPath}/static/js/hrms.js" type="text/javascript"></script>
					<link href="http://cdn.bootcss.com/bootstrap/3.3.4/css/bootstrap.min.css" rel="stylesheet">
					<link href="${pageContext.request.contextPath}/static/css/admin.css" type="text/css" rel="stylesheet">
				thymeleaf ---- th:
					<script th:src="@{http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js}"></script>
					<script th:src="${'/js/sbDemo.js'}" type="text/javascript"></script>
					<link th:href="@{http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css}" rel="stylesheet" >
					<link th:href="${'/css/sbDemo.css'}" rel="stylesheet" />
		body
			碎片替换
				fragments/header ---- classpath:/templates/fragments/header.html
				显示不同页面：控制器设置template变量（不同页面的路径），index.html解析template，获得不同页面路劲，进行替换
				----------------------
				每个页面都包含相同的代码块，增加了书写和维护的难度，修改公共部分，那么所有页面都要修改
				想办法把公共部分抽取出来，碎片化思想来完成
				第一个抽取：将html标签、header标签抽取出来，形成外层index.html文件（相当于碎片组装器）
				第二个抽取，将页面上显示的header部分抽取出来形成header.html文件
				第三个抽取：将页面显示footer部分抽取出来形成footer.html文件
				组装，通过谁来组装？ ------ 外层的index.html
				怎么组装？ ---- thymleaf的th:replace替换标签，将抽取出来的公共页面替换到外层index相应的部分
				如何替换不同的部分？ ---- 通过 template 变量来替换不同页面，template是在控制器进行设置，内容是不同页面的路径
				外层index.html，理解成碎片组装器，每个控制器都返回该碎片组装器，设置template，对不同的显示内容进行替换
				为什么要有一个indexSimple.html文件？ -----比如，登录、注册页面，没有公共的header部分和footer部分，所以产生这个文件，去掉了这两个部分
				:: header ---- 准确定位需要替换文件中的哪个部分
	创建test模块下的index.html
		thymleaf 页面标签的使用和数据处理
			th:text
			th:if,th:unless
			th:attr
			th:href，th:src
			th:object
			form
			th:each
作业问题		
	+ "limit 1"
		命名 ---- 方法、My、path（restful）
过滤器、拦截器
	简介：作用点不同
		过滤器：对request、response进行处理，过滤信息，设置参数等等
			处理request、response对象
			不能获取ioc容器中的bean，它自己需要注册才能实例化成ioc的bean
			单调一些
		拦截器：为了增强业务流中功能，日记处理、权限检查、性能监控等
			只是针对 action（controller）
			可以获取ioc容器的bean，比如，可以注入service等
			强大一些，灵活一些（在前、中、后执行）
	套路顺序1：pom ---- 无需引入额外jar
	套路顺序2：配置 ---- 牵涉到了业务逻辑，需要配置类
	套路顺序3：应用 ---- 无需手动调用
	
	过滤器
		过滤掉请求参数中的敏感字符串fuck ---- ***
		创建过滤器 ---- 注册过滤器 ---- 过滤规则
		通过包装类 HttpServletRequestWrapper 来处理 request 对象中参数的问题
	拦截器
		通过path路径，自动设置template路径
		创建拦截器 ----- 注册拦截器 ----- 拦截规则

作业
	完成组装器，外层index.html，并且展示test模块下的index页面
	完成常用标签的应用
	完成过滤器、拦截器例子
		
==================================================================
aop
	简介
		抽取公共的业务逻辑，行程切面，横切的方式切入到指定的位置；
		连接点：join point
		切点：point cut
		通知：advice ---- before、after、around
		织入：wearing
		切面：Aspect
	套路顺序1：pom ---- 无需引入额外jar
	套路顺序2：配置 ---- 无配置		
	套路顺序3：应用 ---- 注解驱动开发aop
		定义一个aop类 --- @aspect、@Component
		设置切点 ---- @Pointcut
		切面程序 ---- advice
		--------
		有可能需要手动调用
		也可以不用手动调用
文件上传下载
	单/多个文件上传
		页面端：form ----- enctype="multipart/form-data"
	文件下载
	
		
	
	
				
	
	
		
		
		
	
	
	
		
	
		
	
	
	
	